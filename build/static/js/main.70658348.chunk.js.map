{"version":3,"sources":["assets/twitter-logo.svg","assets/sword.png","constants.js","Components/LoadingIndicator/index.js","Components/SelectCharacter/index.js","Components/Arena/index.js","App.js","index.js"],"names":["CONTRACT_ADDRESS","transformCharacterData","characterData","name","imageURI","hp","toNumber","maxHp","attackDamage","LoadingIndicator","className","SelectCharacter","setCharacterNFT","useState","characters","setCharacters","gameContract","setGameContract","mintingCharacter","setMintingCharacter","mintCharacterNFTAction","characterId","a","console","log","mintCharacterNFT","mintTxn","wait","warn","useEffect","window","ethereum","signer","ethers","providers","Web3Provider","getSigner","contract","Contract","abi","getCharacters","getAllDefaultCharacters","charactersTxn","character","map","onCharacterMint","sender","tokenId","characterIndex","alert","checkIfPlayerHasNFT","characterNFT","on","off","length","index","src","alt","type","onClick","Arena","boss","setBoss","attackState","setAttackState","showToast","setShowToast","runAttackAction","attackBoss","attackTxn","setTimeout","error","fetchBoss","getBigBoss","bossTxn","onAttackComplete","newBossHp","newPlayerHp","bossHp","playerHp","prevState","id","value","max","TWITTER_HANDLE","TWITTER_LINK","App","currentAccount","setCurrentAccount","walletConnect","setWalletConnect","isLoading","setIsLoading","checkIfWalletIsConnected","request","method","chainId","accounts","account","connectWallet","fetchNFTMetadata","provider","txn","swordLogo","buttonText","renderContent","twitterLogo","href","target","rel","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.70658348.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/twitter-logo.ab177c79.svg\";","export default __webpack_public_path__ + \"static/media/sword.ee84f372.png\";","const CONTRACT_ADDRESS = \"0x6960aB9260bf9645F328D7623f66f9Bd9A76EA55\";\r\n\r\nconst transformCharacterData = (characterData) => {\r\n    return {\r\n        name: characterData.name,\r\n        imageURI: characterData.imageURI,\r\n        hp: characterData.hp.toNumber(),\r\n        maxHp: characterData.maxHp.toNumber(),\r\n        attackDamage: characterData.attackDamage.toNumber()\r\n    };\r\n};\r\n\r\nexport { CONTRACT_ADDRESS, transformCharacterData };","import React from 'react';\r\nimport './LoadingIndicator.css';\r\n\r\nconst LoadingIndicator = () => {\r\n  return (\r\n    <div className=\"lds-ring\">\r\n      <div></div>\r\n      <div></div>\r\n      <div></div>\r\n      <div></div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default LoadingIndicator;\r\n","import React, {useEffect, useState} from \"react\";\r\nimport { ethers } from \"ethers\";\r\nimport './SelectCharacter.css';\r\nimport { CONTRACT_ADDRESS, transformCharacterData } from \"../../constants\";\r\nimport abi from '../../utils/NFTGame.json'\r\nimport LoadingIndicator from '../../Components/LoadingIndicator';\r\n\r\nconst SelectCharacter = ({ setCharacterNFT }) => {\r\n    const [characters, setCharacters] = useState([]);\r\n    const [gameContract, setGameContract] = useState(null);\r\n    const [mintingCharacter, setMintingCharacter] = useState(false);\r\n\r\n    // Render the fetched characters\r\n    const renderCharacters = () => \r\n        characters.map((character, index) => (\r\n            <div className=\"character-item\"key={character.name}>\r\n                <div className=\"name-container\">\r\n                    <p>{character.name}</p>\r\n                </div>\r\n                <img src={character.imageURI} alt={character.name}/>\r\n                <button\r\n                    type=\"button\"\r\n                    className=\"character-mint-button\"\r\n                    onClick={mintCharacterNFTAction(index)}\r\n                >{`Mint ${character.name}`}</button>\r\n            </div>\r\n        ));\r\n\r\n    // Mint character on button click\r\n    // Actions\r\n    const mintCharacterNFTAction = (characterId) => async () => {\r\n        try {\r\n            if (gameContract) {\r\n                setMintingCharacter(true);\r\n                console.log('Minting character in progress...');\r\n                const mintTxn = await gameContract.mintCharacterNFT(characterId);\r\n                await mintTxn.wait();\r\n                console.log('mintTxn:', mintTxn);\r\n                setMintingCharacter(false);\r\n            }\r\n        } catch (error) {\r\n            console.warn('MintCharacterAction Error:', error);\r\n            setMintingCharacter(false);\r\n        }\r\n    };\r\n\r\n    // Set a reuseable contract object\r\n    useEffect (() => {\r\n        const {ethereum} = window;\r\n\r\n        if (ethereum) {\r\n            // \"Provider\" is Ethereum nodes, provided by MetaMask in the background\r\n            // Used to send/recieve data from our deployed contract\r\n            const provider = new ethers.providers.Web3Provider(window.ethereum);\r\n            // \"Signer\" is an abstraction of an ethereum account\r\n            const signer = provider.getSigner();\r\n            const contract = new ethers.Contract(CONTRACT_ADDRESS, abi.abi, signer);\r\n            setGameContract(contract);\r\n        } else {\r\n            console.log(\"Ethereum object not found!\");\r\n        }\r\n    }, []);\r\n\r\n    // Fetch all characters from contract\r\n    useEffect(() => {\r\n        const getCharacters = async () => {\r\n            try{\r\n                console.log(\"Getting contract characters...\");\r\n                // Call charracter to get all mintable characters\r\n                const charactersTxn = await gameContract.getAllDefaultCharacters();\r\n                console.log(\"Character Txn : \", charactersTxn);\r\n\r\n                // Go through all charaters and transform the data\r\n                const character = charactersTxn.map((characterData) =>\r\n                    transformCharacterData(characterData)\r\n                );\r\n                // Set mintable characters\r\n                setCharacters(character);\r\n            } catch (error) {\r\n                console.log(\"Something went wrong while fetching characters: \",error);\r\n            }\r\n        };\r\n\r\n        // Callback function that will get triggered when character is minted\r\n        const onCharacterMint = async (sender, tokenId, characterIndex) => {\r\n            alert(`Your NFT is all done -- see it here: https://testnets.opensea.io/assets/${gameContract}/${tokenId.toNumber()}`)\r\n            console.log(\r\n                `CharacterNFTMinted - sender: ${sender} tokenId: ${tokenId.toNumber()} characterIndex: ${characterIndex.toNumber()}`\r\n            );\r\n            if (gameContract) {\r\n                const characterNFT = await gameContract.checkIfPlayerHasNFT();\r\n                console.log(\"Character NFT : \", characterNFT);\r\n                setCharacterNFT(transformCharacterData(characterNFT));\r\n            }\r\n        };\r\n\r\n        if (gameContract) {\r\n            getCharacters();\r\n            // Set up NFT minted listener\r\n            gameContract.on(\"CharacterNFTMinted\", onCharacterMint);\r\n        }\r\n\r\n        return () => {\r\n            if (gameContract) {\r\n                gameContract.off('CharacterNFTMinted', onCharacterMint);\r\n            }\r\n        };\r\n        // eslint-disable-next-line\r\n    }, [gameContract]);\r\n\r\n    return(\r\n        <div className=\"select-character-container\">\r\n            <h2>Mint Your Sorcerer. Choose wisely.</h2>\r\n            {/* Only show this when there are characters in state */}\r\n            {characters.length > 0 && (\r\n                <div className=\"character-grid\">\r\n                    {renderCharacters()}\r\n                </div>\r\n            )}\r\n            {/* Only show our loading state if mintingCharacter is true */}\r\n            {mintingCharacter && (\r\n            <div className=\"loading\">\r\n                <div className=\"indicator\">\r\n                <LoadingIndicator />\r\n                <p>Minting In Progress...</p>\r\n                </div>\r\n                <img\r\n                src=\"https://media2.giphy.com/media/61tYloUgq1eOk/giphy.gif?cid=ecf05e47dg95zbpabxhmhaksvoy8h526f96k4em0ndvx078s&rid=giphy.gif&ct=g\"\r\n                alt=\"Minting loading indicator\"\r\n                />\r\n            </div>\r\n            )}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default SelectCharacter;","import React, { useEffect, useState } from 'react';\r\nimport { ethers } from 'ethers';\r\nimport { CONTRACT_ADDRESS, transformCharacterData } from '../../constants';\r\nimport abi from '../../utils/NFTGame.json';\r\nimport './Arena.css';\r\nimport LoadingIndicator from '../../Components/LoadingIndicator';\r\n\r\nconst Arena = ({ characterNFT, setCharacterNFT}) => {\r\n    // State\r\n    const [gameContract, setGameContract] = useState(null);\r\n    const [boss, setBoss] = useState(null);\r\n    const [attackState, setAttackState] = useState('');\r\n    const [showToast, setShowToast] = useState(false);\r\n\r\n    const runAttackAction = async () => {\r\n        try {\r\n            if (gameContract) {\r\n                setAttackState('attacking');\r\n                console.log('Attacking boss...');\r\n                const attackTxn = await gameContract.attackBoss();\r\n                await attackTxn.wait();\r\n                console.log('attackTxn:', attackTxn);\r\n                setAttackState('hit');\r\n\r\n                setShowToast(true);\r\n                setTimeout(() => {\r\n                    setShowToast(false);\r\n                }, 5000);\r\n            }\r\n          } catch (error) {\r\n                console.error('Error attacking boss:', error);\r\n                setAttackState('');\r\n            }\r\n    };\r\n\r\n    // UseEffects\r\n    useEffect(() => {\r\n        const { ethereum } = window;\r\n        if (ethereum) {\r\n            const provider = new ethers.providers.Web3Provider(ethereum);\r\n            const signer = provider.getSigner();\r\n            const contract = new ethers.Contract(\r\n                CONTRACT_ADDRESS,\r\n                abi.abi,\r\n                signer\r\n        );\r\n\r\n        setGameContract(contract);\r\n        } else {\r\n            console.log('Ethereum object not found');\r\n        }\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        // Setup async function that will get the boss from our contract and sets in state\r\n        const fetchBoss = async () => {\r\n            const bossTxn = await gameContract.getBigBoss();\r\n            console.log('Boss:', bossTxn);\r\n            setBoss(transformCharacterData(bossTxn));\r\n        };\r\n\r\n        const onAttackComplete = (newBossHp, newPlayerHp) => {\r\n            const bossHp = newBossHp.toNumber();\r\n            const playerHp = newPlayerHp.toNumber();\r\n\r\n            console.log(`AttackComplete: Boss Hp: ${bossHp} Player Hp: ${playerHp}`);\r\n\r\n            /*\r\n            * Update both player and boss Hp\r\n            */\r\n            setBoss((prevState) => {\r\n                return { ...prevState, hp: bossHp };\r\n            });\r\n\r\n            setCharacterNFT((prevState) => {\r\n                return { ...prevState, hp: playerHp };\r\n            });\r\n        };\r\n      \r\n        if (gameContract) {\r\n            // gameContract is ready to go! Let's fetch our boss\r\n            fetchBoss();\r\n            gameContract.on('AttackComplete', onAttackComplete);\r\n        }\r\n\r\n        return () => {\r\n            if (gameContract) {\r\n                gameContract.off('AttackComplete', onAttackComplete);\r\n            }\r\n        }\r\n        // eslint-disable-next-line\r\n    }, [gameContract]);\r\n\r\n    return (\r\n        <div className=\"arena-container\">\r\n            {boss && characterNFT && (\r\n            <div id=\"toast\" className={showToast ? 'show' : ''}>\r\n                <div id=\"desc\">{`💥 ${boss.name} was hit for ${characterNFT.attackDamage}!`}</div>\r\n            </div>\r\n            )}\r\n            {/* Boss */}\r\n            {boss && (\r\n                <div className=\"boss-container\">\r\n                    <div className={`boss-content ${attackState}`}>\r\n                    <h2>🔥 {boss.name} 🔥</h2>\r\n                    <div className=\"image-content\">\r\n                        <img src={boss.imageURI} alt={`Boss ${boss.name}`} />\r\n                        <div className=\"health-bar\">\r\n                        <progress value={boss.hp} max={boss.maxHp} />\r\n                        <p>{`${boss.hp} / ${boss.maxHp} HP`}</p>\r\n                        </div>\r\n                    </div>\r\n                    </div>\r\n                    {(attackState === 'attacking') ? (\r\n                    <div className=\"loading-indicator\">\r\n                        <LoadingIndicator />\r\n                        <p>Attacking ⚔️</p>\r\n                    </div>) : (\r\n                        <div className=\"attack-container\">\r\n                            <button className=\"cta-button\" onClick={runAttackAction}>\r\n                                {`💥 Attack ${boss.name}`}\r\n                            </button>\r\n                        </div>\r\n                    )\r\n                    }\r\n                </div>\r\n                )}\r\n\r\n            {/* Character NFT */}\r\n            {characterNFT && (\r\n                <div className=\"players-container\">\r\n                    <div className=\"player-container\">\r\n                    <h2>Your Character</h2>\r\n                    <div className=\"player\">\r\n                        <div className=\"image-content\">\r\n                        <h2>{characterNFT.name}</h2>\r\n                        <img\r\n                            src={characterNFT.imageURI}\r\n                            alt={`Character ${characterNFT.name}`}\r\n                        />\r\n                        <div className=\"health-bar\">\r\n                            <progress value={characterNFT.hp} max={characterNFT.maxHp} />\r\n                            <p>{`${characterNFT.hp} / ${characterNFT.maxHp} HP`}</p>\r\n                        </div>\r\n                        </div>\r\n                        <div className=\"stats\">\r\n                        <h4>{`⚔️ Attack Damage: ${characterNFT.attackDamage}`}</h4>\r\n                        </div>\r\n                    </div>\r\n                    </div>\r\n                </div>\r\n            )}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Arena;","import React, {useEffect, useState} from 'react';\r\nimport twitterLogo from './assets/twitter-logo.svg';\r\nimport swordLogo from './assets/sword.png';\r\nimport './App.css';\r\nimport SelectCharacter from './Components/SelectCharacter';\r\nimport Arena from './Components/Arena';\r\nimport { CONTRACT_ADDRESS , transformCharacterData} from './constants';\r\nimport abi from './utils/NFTGame.json';\r\nimport { ethers } from 'ethers';\r\nimport LoadingIndicator from './Components/LoadingIndicator';\r\n\r\n// Constants\r\nconst TWITTER_HANDLE = '_buildspace';\r\nconst TWITTER_LINK = `https://twitter.com/${TWITTER_HANDLE}`;\r\n\r\nconst App = () => {\r\n  const [currentAccount, setCurrentAccount] = useState(null);\r\n  const [characterNFT, setCharacterNFT] = useState(null);\r\n  const [walletConnect, setWalletConnect] = useState(false);\r\n  const [isLoading, setIsLoading] = useState(false);\r\n\r\n  // Checkin if wallet is connected or not\r\n  const checkIfWalletIsConnected = async() => {\r\n    try{\r\n      // First make sure we have access to window.ethereum\r\n      // MetaMask automatically injects an special object named ethereum\r\n      const { ethereum } = window;\r\n      if (!ethereum) {\r\n        console.log(\"Make sure you have metamask!\");\r\n        setIsLoading(false);\r\n        return;\r\n      } else {\r\n        console.log(\"We have the ethereum object\", ethereum);\r\n      }\r\n\r\n      // Check if user is connected to rinkeby test network\r\n      let chainId = await ethereum.request({ method: 'eth_chainId' });\r\n      console.log(\"Connected to chain \" + chainId);\r\n\r\n      // String, hex code of the chainId of the Rinkebey test network\r\n      const rinkebyChainId = \"0x4\"; \r\n      if (chainId !== rinkebyChainId) {\r\n        alert(\"Please connect to the Rinkeby Test Network!\");\r\n      }\r\n      \r\n      // Checking if we're authorized to acess the user's wallet\r\n      const accounts = await ethereum.request({ method: 'eth_accounts'});\r\n      if (accounts.length !== 0){\r\n        const account = accounts[0];\r\n        console.log(\"Found an authorized account: \", account);\r\n        setWalletConnect(true);\r\n      }else{\r\n        console.log(\"No authorized account found!\");\r\n      }\r\n    } catch (error) {\r\n      console.log(error);\r\n    }\r\n    setIsLoading(false);\r\n  }\r\n\r\n  //Connects my wallet to this site\r\n  const connectWallet = async() => {\r\n    try{\r\n      // Looking for ethereum object\r\n      const {ethereum} = window;\r\n      if (!ethereum) {\r\n        alert(\"Get MetaMask\");\r\n        return;\r\n      }\r\n      // If we find MetaMask, ask MetaMask to give access to user's wallet\r\n      const accounts = await ethereum.request({method: \"eth_requestAccounts\"});\r\n      console.log(\"Connected : \",accounts[0]);\r\n      setCurrentAccount(accounts[0]);\r\n    }catch(error){\r\n      console.log(error);\r\n    }\r\n  }\r\n\r\n  // Render Methods\r\n  const renderContent = () => {\r\n    // If app is currently loading, just render laoding indicator\r\n    if (isLoading) {\r\n      return <LoadingIndicator />;\r\n    }\r\n\r\n    // If wallet is connected\r\n    if (!currentAccount) {\r\n      const buttonText = walletConnect ? \"Play\" : \"Connect Wallet To Play\";\r\n      return (\r\n        <div className=\"connect-wallet-container\">\r\n          <img\r\n            src=\"https://i.imgur.com/d4VT4dn.gif\"\r\n            alt=\"Hora Hora Gif\"\r\n          />\r\n          {/* Button that trigger wallet connect */}\r\n          <button\r\n            className=\"cta-button connect-wallet-button\"\r\n            onClick={connectWallet}\r\n          >\r\n            {buttonText}\r\n          </button>\r\n        </div>\r\n      );\r\n    } \r\n    // If wallet is connected but player has no character NFT\r\n    else if (currentAccount && !characterNFT) {\r\n      return <SelectCharacter setCharacterNFT={setCharacterNFT} />;\r\n    }\r\n    // If there is a connected wallet and characterNF\r\n    else if (currentAccount && characterNFT) {\r\n      return <Arena characterNFT={characterNFT} setCharacterNFT={setCharacterNFT}/>;\r\n    }\r\n  }\r\n\r\n  useEffect(() => {\r\n    setIsLoading(true);\r\n    checkIfWalletIsConnected();\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    const fetchNFTMetadata = async () => {\r\n      console.log(\"Checking for character NFT on address: \",currentAccount);\r\n\r\n      // \"Provider\" is Ethereum nodes, provided by MetaMask in the background\r\n      // Used to send/recieve data from our deployed contract\r\n      const provider = new ethers.providers.Web3Provider(window.ethereum);\r\n      // \"Signer\" is an abstraction of an ethereum account\r\n      const signer = provider.getSigner();\r\n      const gameContract = new ethers.Contract(CONTRACT_ADDRESS, abi.abi, signer);\r\n\r\n      const txn = await gameContract.checkIfPlayerHasNFT();\r\n      if (txn.name) {\r\n        console.log(\"%s has character NFT\", currentAccount);\r\n        setCharacterNFT(transformCharacterData(txn));\r\n      } else {\r\n        console.log(\"No character NFT found!\");\r\n      }\r\n\r\n      setIsLoading(false);\r\n    }\r\n\r\n    // Run the above function only if we have a connected wallet\r\n    if (currentAccount) {\r\n      console.log(\"Current Account : \",currentAccount);\r\n      fetchNFTMetadata();\r\n    }\r\n  }, [currentAccount]);\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <div className=\"container\">\r\n        <div className=\"header-container\">\r\n          <p className=\"header gradient-text\">\r\n            <img className='sword-logo' src={swordLogo} alt=\"⚔️\"/>\r\n              Metaverse Sorcerers\r\n            <img className='sword-logo' src={swordLogo} alt=\"⚔️\"/>\r\n            </p>\r\n          <p className=\"sub-text\">Team up to protect the Metaverse from Cursed Spirits!</p>\r\n          {renderContent()}\r\n        </div>\r\n        <div className=\"footer-container\">\r\n          <img alt=\"Twitter Logo\" className=\"twitter-logo\" src={twitterLogo} />\r\n          <a\r\n            className=\"footer-text\"\r\n            href={TWITTER_LINK}\r\n            target=\"_blank\"\r\n            rel=\"noreferrer\"\r\n          >{`built with @${TWITTER_HANDLE}`}</a>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n"],"sourceRoot":""}